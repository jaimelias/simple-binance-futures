var BinanceFutures;(()=>{var e={262:()=>{}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";r.r(n),r.d(n,{default:()=>c,defaultEndpoints:()=>s});const e=(e,t)=>{if(!("number"==typeof e&&e>=10))throw new Error('Invalid "triggerPrice" property in createStopLossOrder or createTakeProfitOrder. "triggerPrice" must be a positive number greater than 0.');if(!t||!["KEEP","ERROR","REPLACE"].includes(t))throw new Error('Invalid "handleExistingOrders" property in createStopLossOrder or createTakeProfitOrder. Only "KEEP", "ERROR", and "REPLACE" values are accepted.')};var t=r(262);const i=["time"],o=async({main:e,side:t,entryPrice:r,handleExistingOrders:n})=>{const i=(await e.getOrders()).filter((r=>r.symbol===e.contractName&&"LIMIT"===r.type&&r.side===t&&!1===r.reduceOnly&&!1===r.priceProtect&&!1===r.closePosition&&r.goodTillDate));if(i.length>0){if("KEEP"===n)return e.debug&&console.log(`New order (entryPrice=${r}, side=${t}) not executed. Found existing orders:`,i),!1;if("ERROR"===n)throw Error(`New order (entryPrice=${r}, side=${t}) not executed. Found duplicated orders: ${JSON.stringify(i)}`);if("REPLACE"===n){const t=await e.cancelMultipleOrders(i);e.debug&&console.log("cancelMultipleOrders",t)}else"ADD"===n&&e.debug&&console.log("Existing orders found. Pushing new order without deleting existing orders.")}return!0},a=e=>{const t=new Date(e),r=e=>e<10?`0${e}`:e;return`${t.getFullYear()}-${r(t.getMonth()+1)}-${r(t.getDate())} ${r(t.getHours())}:${r(t.getMinutes())}:${r(t.getSeconds())}`},s={testnet:"https://testnet.binancefuture.com",production:"https://fapi.binance.com"};class c{constructor(e,t){(e=>{if("object"!=typeof e||null===e)throw new Error('Invalid type: "strategy" must be a non-null object.');if(!e.hasOwnProperty("environment"))throw new Error('Missing "environment" property in strategy object.');if(!["testnet","production"].includes(e.environment))throw new Error('Invalid "environment" property. Only "testnet" and "production" are accepted.');if(!e.symbol)throw new Error('Invalid "symbol" property in strategy object.');if(!e.settlementCurrency)throw new Error('Invalid "symbol" property in strategy object.');if(!e.hasOwnProperty("leverage"))throw new Error('Missing "leverage" property in strategy object.');if(e.hasOwnProperty("marginType")&&("string"!=typeof e.marginType||!["ISOLATED","CROSSED"].includes(e.marginType)))throw new Error('Invalid "marginType" property in strategy object. Only "ISOLATED" and "CROSSED" margins are supported.');if(e.hasOwnProperty("useServerTime")&&"boolean"!=typeof e.useServerTime)throw new Error('Invalid "useServerTime" property in strategy object. Only boolean value is accepted');if(e.hasOwnProperty("debug")&&"boolean"!=typeof e.debug)throw new Error('Invalid "debug" property in strategy object. Only boolean value is accepted');const t=e.leverage;if("number"!=typeof t||isNaN(t)||t<=0)throw new Error('Invalid "leverage". It must be a positive number.')})(t);const{settlementCurrency:r,symbol:n,leverage:i,marginType:o="ISOLATED",environment:a,debug:c=!1,useServerTime:d=!1}=t;(e=>{if(!["testnet","production"].includes(e))throw new Error('Invalid environment. Allowed values are "testnet" and "production".')})(a),((e,t)=>{if("object"!=typeof e||null===e)throw new Error('Invalid type: "credentials" must be a non-null object.');if(!e.hasOwnProperty(t))throw new Error(`Missing credentials for environment: "${t}".`);const r=e[t];if(!r.hasOwnProperty("API_KEY"))throw new Error(`Missing "API_KEY" in credentials for environment "${t}".`);if(!r.hasOwnProperty("API_SECRET"))throw new Error(`Missing "API_SECRET" in credentials for environment "${t}".`)})(e,a);const{API_KEY:l,API_SECRET:p,PROXY:u}=e[a];this.API_KEY=l,this.API_SECRET=p,this.endpoint="string"==typeof u&&u.startsWith("http")?`${u}/fapi`:`${s[a]}/fapi`,this.settlementCurrency=r,this.contractName=`${n}${r}`,this.leverage=i,this.marginType=o,this.useServerTime=d,this.environment=a,this.debug=c,this.engine="undefined"!=typeof ScriptApp?"google-app-script":"undefined"!=typeof process&&"node"===process.release?.name?"node":"undefined"!=typeof Deno?"deno":"undefined"!=typeof Bun?"bun":"undefined"!=typeof WebSocketPair?"cloudflare-worker":"unknown",this.cache={}}async fetch(e,r="GET",n={},o="v1"){return await(async(e,r,n,o,a)=>{const s={...o,symbol:e.contractName};if(!i.includes(r)){let t=Date.now();e.useServerTime&&(t=await e.getServerTime()),s.timestamp=t,s.recvWindow=5e3}const c=`${e.endpoint}/${a}/${r}`,d=Object.entries(s).map((([e,t])=>`${e}=${encodeURIComponent(t)}`)).join("&"),l=((e,r)=>{const{engine:n,API_SECRET:i}=e;if("google-app-script"===n)return Utilities.computeHmacSha256Signature(r,i).map((e=>{const t=e+256&255;return(t<16?"0":"")+t.toString(16)})).join("");let o;if("object"==typeof t)o=t;else{if("object"!=typeof e.nodeCrypto)throw new Error('"crypto" library is not available in your global scope. you can pass "crypto" using the property "nodeCrypto" in your strategy');o=e.nodeCrypto}const a=o.createHmac("sha256",i);return a.update(r),a.digest("hex")})(e,d),p=i.includes(r)?d:`${d}&signature=${l}`,u=i.includes(r)?{}:{"X-MBX-APIKEY":e.API_KEY};let y;const h={method:n,headers:u};return"GET"===n||"DELETE"===n?y=`${c}?${p}`:(y=c,u["Content-Type"]="application/x-www-form-urlencoded","google-app-script"===e.engine?(h.payload=p,h.muteHttpExceptions=!0):h.body=p),"google-app-script"===e.engine?await(async(e,t)=>{const r=UrlFetchApp.fetch(e,t),n=r.getResponseCode(),i=r.getContentText();if(200===n)return JSON.parse(i);throw new Error(`Request failed with status ${n}: ${i}`)})(y,h):await(async(e,t,r)=>{let n;if("function"==typeof fetch)n=fetch;else{if("function"!=typeof e.nodeFetch)throw new Error('"fetch" library is not available in your global scope. you can pass "fetch" using the property "nodeFetch" in your strategy');n=e.nodeFetch}const i=await n(t,r),o=i.status,a=await i.text();if(200===o)return JSON.parse(a);throw new Error(`Request failed with status ${o}: ${a}`)})(e,y,h)})(this,e,r,n,o)}async getServerTime(){return(await this.fetch("time","GET",{})).serverTime}async getOrders(){return await this.fetch("openOrders","GET",{})}async getPositions(){return await this.fetch("positionRisk","GET",{},"v3")}async getBalance(){const e=(await this.fetch("balance","GET",{},"v2")).find((e=>e.asset===this.settlementCurrency));return"object"==typeof e?e.balance:0}async getContractInfo(){const{contractName:e}=this,t=`contract_${e}`;if(this.cache.hasOwnProperty(t))return this.cache[t];const r=(await this.fetch("exchangeInfo","GET",{})).symbols.find((t=>t.symbol===e));if(void 0===r)throw new Error(`contract ${e} not fund`);return this.cache[t]=r,r}async changeLeverage(){return await this.fetch("leverage","POST",{leverage:this.leverage})}async cancelMultipleOrders(e){const t=JSON.stringify(e.map((e=>e.orderId)));return await this.fetch("batchOrders","DELETE",{orderIdList:t})}async cancelOrder(e){const{orderId:t}=e;return await this.fetch("order","DELETE",{orderId:t})}async createLimitOrder({side:e,amountInUSD:t,entryPrice:r,handleExistingOrders:n,expirationInMinutes:i}){return await(async({main:e,side:t="BUY",amountInUSD:r,entryPrice:n,handleExistingOrders:i,expirationInMinutes:a=10})=>{(({side:e,amountInUSD:t,entryPrice:r,handleExistingOrders:n,expirationInMinutes:i})=>{if(!e||!["BUY","SELL"].includes(e))throw new Error('Invalid or missing property "side" in createLimitOrder.');if("number"!=typeof t||t<=0)throw new Error('Missing or invalid "amountInUSD" in createLimitOrder. "amountInUSD" must be a positive number.');if("number"!=typeof r||r<=0)throw new Error('Missing or invalid "entryPrice" in createLimitOrder. "entryPrice" must be a positive number.');if(void 0!==i&&!("number"==typeof i&&i>=10))throw new Error('Invalid "expirationInMinutes" in createLimitOrder. "expirationInMinutes" must be a positive number greater than or equal to 10.');if(!n||!["KEEP","ERROR","REPLACE","ADD"].includes(n))throw new Error('Invalid "handleExistingOrders" property in "createLimitOrder". Only "KEEP", "ERROR", "REPLACE", and "ADD" strings are supported. Defaults to "ADD".')})({side:t,amountInUSD:r,entryPrice:n,handleExistingOrders:i,expirationInMinutes:a}),await o({main:e,side:t,entryPrice:n,handleExistingOrders:i});const s=await e.getContractInfo(),c=function(e,t,r,n){const{filters:i,quantityPrecision:o}=r,a=i.find((e=>"LOT_SIZE"===e.filterType)),s=parseFloat(a.minQty),c=parseFloat(a.maxQty),d=parseFloat(a.stepSize),l=i.find((e=>"MIN_NOTIONAL"===e.filterType)),p=parseFloat(l.notional);let u=e*t/n;if(u=parseFloat(u.toFixed(o)),u<s)throw new Error(`Quantity ${u} is below the minimum allowed: ${s}`);if(u>c)throw new Error(`Quantity ${u} exceeds the maximum allowed: ${c}`);u=Math.floor(u/d)*d;const y=u*n;if(y<p)throw new Error(`Notional value ${y} is below the minimum allowed: ${p}`);return u}(r,e.leverage,s,n),d={side:t,type:"LIMIT",quantity:c,price:n,timeInForce:"GTC"};if("number"==typeof a){a<=10&&(a=10.1);const t=60*a*1e3;let r=Date.now();e.useServerTime&&(r=await e.getServerTime()),d.goodTillDate=r+t,d.timeInForce="GTD"}return await e.fetch("order","POST",d)})({main:this,side:e,amountInUSD:t,entryPrice:r,handleExistingOrders:n,expirationInMinutes:i})}async createTakeProfitOrder({triggerPrice:t,handleExistingOrders:r}){return await(async({main:t,triggerPrice:r,handleExistingOrders:n,positions:i})=>{if(e(r,n),"KEEP"===n)return!1;const o="TAKE_PROFIT_MARKET";i||(i=await t.getPositions());const a=i.find((e=>e.symbol===t.contractName&&0!==parseFloat(e.positionAmt)));if(!a)throw new Error(`No open position found for ${t.contractName}`);await(async({main:e,handleExistingOrders:t,type:r})=>{if("KEEP"===t)return!0;if("ERROR"===t)throw new Error('New "take profit" order not execute because of an existing "take profit" order.');const n=(await e.getOrders()).find((e=>e.origType===r));if(n){const t=await e.cancelOrder(n);e.debug&&console.log("createTakeProfitOrder canceled order",t)}})({main:t,handleExistingOrders:n,type:o});const{entryPrice:s,positionAmt:c}=a,d=parseFloat(c)>0?"BUY":"SELL",l=await t.getContractInfo(),{tickSize:p}=l.filters.find((e=>"PRICE_FILTER"===e.filterType)),u=parseFloat((Math.round(r/p)*p).toFixed(l.pricePrecision));if("SELL"===d&&u>=parseFloat(s)||"BUY"===d&&u<=parseFloat(s))throw new Error(`Invalid take-profit price for ${d} position.`);const y={symbol:t.contractName,side:"BUY"===d?"SELL":"BUY",positionSide:"BOTH",type:o,timeInForce:"GTE_GTC",quantity:0,stopPrice:u,workingType:"MARK_PRICE",closePosition:!0,placeType:"position",priceProtect:!0};return t.debug&&console.log("payload createTakeProfitOrder",y),await t.fetch("order","POST",y)})({main:this,triggerPrice:t,handleExistingOrders:r})}async createStopLossOrder({triggerPrice:t,handleExistingOrders:r}){return await(async({main:t,triggerPrice:r,handleExistingOrders:n="REPLACE",positions:i})=>{if(e(r,n),"KEEP"===n)return!1;const o="STOP_MARKET";i||(i=await t.getPositions());const a=i.find((e=>e.symbol===t.contractName&&0!==parseFloat(e.positionAmt)));if(!a)throw new Error(`No open position found for ${t.contractName}`);await(async({main:e,handleExistingOrders:t,type:r})=>{if("KEEP"===t)return!0;if("ERROR"===t)throw new Error('New "take profit" order not execute because of an existing "take profit" order.');const n=(await e.getOrders()).find((e=>e.origType===r));if(n){const t=await e.cancelOrder(n);e.debug&&console.log("createStopLossOrder canceled order",t)}})({main:t,handleExistingOrders:n,type:o});const{entryPrice:s,positionAmt:c}=a,d=parseFloat(c)>0?"BUY":"SELL",l=await t.getContractInfo(),{tickSize:p}=l.filters.find((e=>"PRICE_FILTER"===e.filterType)),u=parseFloat((Math.round(r/p)*p).toFixed(l.pricePrecision));if("SELL"===d&&u<=parseFloat(s)||"BUY"===d&&u>=parseFloat(s))throw new Error(`Invalid stop-loss price for ${d} position.`);const y={symbol:t.contractName,side:"BUY"===d?"SELL":"BUY",positionSide:"BOTH",type:o,timeInForce:"GTE_GTC",quantity:0,stopPrice:u,workingType:"MARK_PRICE",closePosition:!0,placeType:"position",priceProtect:!0};return t.debug&&console.log("payload createStopLossOrder",y),await t.fetch("order","POST",y)})({main:this,triggerPrice:t,handleExistingOrders:r})}async changeMarginType(){return await this.fetch("marginType","POST",{marginType:this.marginType})}async ohlcv({interval:e,startTime:t,endTime:r,limit:n}){(({interval:e,limit:t=500,startTime:r,endTime:n})=>{const i=["1m","3m","5m","15m","30m","1h","2h","4h","6h","8h","12h","1d","3d","1w","1M"];if(!e)throw new Error('"interval" is required.');if(!i.includes(e))throw new Error(`Invalid "interval". Accepted values are: ${i.join(", ")}.`);if("number"!=typeof t||t<1||t>1500)throw new Error('"limit" must be a number between 1 and 1500 (inclusive).');if(t&&(r||n))throw new Error('"ohlcv" does not accept "limit" together with "startTime" or "endTime".');if(!(t||r&&n))throw new Error('"ohlcv" requires either "limit" or both "startTime" and "endTime".');if(r&&n&&new Date(r)>=new Date(n))throw new Error('"startTime" must be earlier than "endTime".')})({interval:e,startTime:t,endTime:r,limit:n});const i={interval:e,...n?{limit:n}:{startTime:t,endTime:r}},o=await this.fetch("klines","GET",i);if(!Array.isArray(o))throw new Error('Invalid response in "ohlcv".');if(!Array.isArray(o[0]))throw new Error('Invalid response in "ohlcv".');return o.map((([e,t,r,n,i,o])=>({open:parseFloat(t),high:parseFloat(r),low:parseFloat(n),close:parseFloat(i),volume:parseFloat(o),date:a(e)})))}}})(),BinanceFutures=n})();