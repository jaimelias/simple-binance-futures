var BinanceFutures;(()=>{var e={262:()=>{}},r={};function t(n){var i=r[n];if(void 0!==i)return i.exports;var o=r[n]={exports:{}};return e[n](o,o.exports,t),o.exports}t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";t.r(n),t.d(n,{default:()=>c,defaultEndpoints:()=>s});const e=(e,r)=>{if(!("number"==typeof e&&e>=10))throw new Error('Invalid "triggerPrice" property in createStopLossOrder or createTakeProfitOrder. "triggerPrice" must be a positive number greater than 0.');if(!r||!["KEEP","ERROR","REPLACE"].includes(r))throw new Error('Invalid "handleExistingOrders" property in createStopLossOrder or createTakeProfitOrder. Only "KEEP", "ERROR", and "REPLACE" values are accepted.')};var r=t(262);const i=["time"],o=async({main:e,side:r,entryPrice:t,handleExistingOrders:n,orders:i})=>{i||(i=await e.getOrders());const o=i.filter((t=>t.symbol===e.contractName&&"LIMIT"===t.type&&t.side===r&&!1===t.reduceOnly&&!1===t.priceProtect&&!1===t.closePosition&&t.goodTillDate));if(o.length>0){if("KEEP"===n)return e.debug&&console.log(`New order (entryPrice=${t}, side=${r}) not executed. Found existing orders:`,o),!1;if("ERROR"===n)throw Error(`New order (entryPrice=${t}, side=${r}) not executed. Found duplicated orders: ${JSON.stringify(o)}`);if("REPLACE"===n){const r=await e.cancelMultipleOrders(o);e.debug&&console.log("cancelMultipleOrders",r)}else"ADD"===n&&e.debug&&console.log("Existing orders found. Pushing new order without deleting existing orders.")}return!0},a=e=>{const r=new Date(e),t=e=>e<10?`0${e}`:e;return`${r.getFullYear()}-${t(r.getMonth()+1)}-${t(r.getDate())} ${t(r.getHours())}:${t(r.getMinutes())}:${t(r.getSeconds())}`},s={testnet:"https://testnet.binancefuture.com",production:"https://fapi.binance.com"};class c{constructor(e,r){(e=>{if("object"!=typeof e||null===e)throw new Error('Invalid type: "strategy" must be a non-null object.');if(!e.hasOwnProperty("environment"))throw new Error('Missing "environment" property in strategy object.');if(!["testnet","production"].includes(e.environment))throw new Error('Invalid "environment" property. Only "testnet" and "production" are accepted.');if(!e.symbol)throw new Error('Invalid "symbol" property in strategy object.');if(!e.settlementCurrency)throw new Error('Invalid "symbol" property in strategy object.');if(!e.hasOwnProperty("leverage"))throw new Error('Missing "leverage" property in strategy object.');if(e.hasOwnProperty("marginType")&&("string"!=typeof e.marginType||!["ISOLATED","CROSSED"].includes(e.marginType)))throw new Error('Invalid "marginType" property in strategy object. Only "ISOLATED" and "CROSSED" margins are supported.');if(e.hasOwnProperty("useServerTime")&&"boolean"!=typeof e.useServerTime)throw new Error('Invalid "useServerTime" property in strategy object. Only boolean value is accepted');if(e.hasOwnProperty("debug")&&"boolean"!=typeof e.debug)throw new Error('Invalid "debug" property in strategy object. Only boolean value is accepted');const r=e.leverage;if("number"!=typeof r||isNaN(r)||r<=0)throw new Error('Invalid "leverage". It must be a positive number.')})(r);const{settlementCurrency:t,symbol:n,leverage:i,marginType:o="ISOLATED",environment:a,debug:c=!1,useServerTime:d=!1}=r;(e=>{if(!["testnet","production"].includes(e))throw new Error('Invalid environment. Allowed values are "testnet" and "production".')})(a),((e,r)=>{if("object"!=typeof e||null===e)throw new Error('Invalid type: "credentials" must be a non-null object.');if(!e.hasOwnProperty(r))throw new Error(`Missing credentials for environment: "${r}".`);const t=e[r];if(!t.hasOwnProperty("API_KEY"))throw new Error(`Missing "API_KEY" in credentials for environment "${r}".`);if(!t.hasOwnProperty("API_SECRET"))throw new Error(`Missing "API_SECRET" in credentials for environment "${r}".`)})(e,a);const{API_KEY:l,API_SECRET:p,PROXY:u}=e[a];this.API_KEY=l,this.API_SECRET=p,this.endpoint="string"==typeof u&&u.startsWith("http")?`${u}/fapi`:`${s[a]}/fapi`,this.settlementCurrency=t,this.contractName=`${n}${t}`,this.leverage=i,this.marginType=o,this.useServerTime=d,this.environment=a,this.debug=c,this.engine="undefined"!=typeof ScriptApp?"google-app-script":"undefined"!=typeof process&&"node"===process.release?.name?"node":"undefined"!=typeof Deno?"deno":"undefined"!=typeof Bun?"bun":"undefined"!=typeof WebSocketPair?"cloudflare-worker":"unknown",this.cache={}}async fetch(e,t="GET",n={},o="v1"){return await(async(e,t,n,o,a)=>{const s={...o,symbol:e.contractName};if(!i.includes(t)){let r=Date.now();e.useServerTime&&(r=await e.getServerTime()),s.timestamp=r,s.recvWindow=5e3}const c=`${e.endpoint}/${a}/${t}`,d=Object.entries(s).map((([e,r])=>`${e}=${encodeURIComponent(r)}`)).join("&"),l=((e,t)=>{const{engine:n,API_SECRET:i}=e;if("google-app-script"===n)return Utilities.computeHmacSha256Signature(t,i).map((e=>{const r=e+256&255;return(r<16?"0":"")+r.toString(16)})).join("");let o;if("object"==typeof r)o=r;else{if("object"!=typeof e.nodeCrypto)throw new Error('"crypto" library is not available in your global scope. you can pass "crypto" using the property "nodeCrypto" in your strategy');o=e.nodeCrypto}const a=o.createHmac("sha256",i);return a.update(t),a.digest("hex")})(e,d),p=i.includes(t)?d:`${d}&signature=${l}`,u=i.includes(t)?{}:{"X-MBX-APIKEY":e.API_KEY};let y;const h={method:n,headers:u};return"GET"===n||"DELETE"===n?y=`${c}?${p}`:(y=c,u["Content-Type"]="application/x-www-form-urlencoded","google-app-script"===e.engine?(h.payload=p,h.muteHttpExceptions=!0):h.body=p),"google-app-script"===e.engine?await(async(e,r)=>{const t=UrlFetchApp.fetch(e,r),n=t.getResponseCode(),i=t.getContentText();if(200===n)return JSON.parse(i);throw new Error(`Request failed with status ${n}: ${i}`)})(y,h):await(async(e,r,t)=>{let n;if("function"==typeof fetch)n=fetch;else{if("function"!=typeof e.nodeFetch)throw new Error('"fetch" library is not available in your global scope. you can pass "fetch" using the property "nodeFetch" in your strategy');n=e.nodeFetch}const i=await n(r,t),o=i.status,a=await i.text();if(200===o)return JSON.parse(a);throw new Error(`Request failed with status ${o}: ${a}`)})(e,y,h)})(this,e,t,n,o)}async getServerTime(){return(await this.fetch("time","GET",{})).serverTime}async getOrders(){return await this.fetch("openOrders","GET",{})}async getPositions(){return await this.fetch("positionRisk","GET",{},"v3")}async getBalance(){const e=(await this.fetch("balance","GET",{},"v2")).find((e=>e.asset===this.settlementCurrency));return"object"==typeof e?e.balance:0}async getContractInfo(){const{contractName:e}=this,r=`contract_${e}`;if(this.cache.hasOwnProperty(r))return this.cache[r];const t=(await this.fetch("exchangeInfo","GET",{})).symbols.find((r=>r.symbol===e));if(void 0===t)throw new Error(`contract ${e} not fund`);return this.cache[r]=t,t}async changeLeverage(){return await this.fetch("leverage","POST",{leverage:this.leverage})}async cancelMultipleOrders(e){const r=JSON.stringify(e.map((e=>e.orderId)));return await this.fetch("batchOrders","DELETE",{orderIdList:r})}async cancelOrder(e){const{orderId:r}=e;return await this.fetch("order","DELETE",{orderId:r})}async createLimitOrder({side:e,amountInUSD:r,entryPrice:t,handleExistingOrders:n,expirationInMinutes:i,orders:a}){return await(async({main:e,side:r="BUY",amountInUSD:t,entryPrice:n,handleExistingOrders:i,expirationInMinutes:a=10,orders:s})=>{(({side:e,amountInUSD:r,entryPrice:t,handleExistingOrders:n,expirationInMinutes:i})=>{if(!e||!["BUY","SELL"].includes(e))throw new Error('Invalid or missing property "side" in createLimitOrder.');if("number"!=typeof r||r<=0)throw new Error('Missing or invalid "amountInUSD" in createLimitOrder. "amountInUSD" must be a positive number.');if("number"!=typeof t||t<=0)throw new Error('Missing or invalid "entryPrice" in createLimitOrder. "entryPrice" must be a positive number.');if(void 0!==i&&!("number"==typeof i&&i>=10))throw new Error('Invalid "expirationInMinutes" in createLimitOrder. "expirationInMinutes" must be a positive number greater than or equal to 10.');if(!n||!["KEEP","ERROR","REPLACE","ADD"].includes(n))throw new Error('Invalid "handleExistingOrders" property in "createLimitOrder". Only "KEEP", "ERROR", "REPLACE", and "ADD" strings are supported. Defaults to "ADD".')})({side:r,amountInUSD:t,entryPrice:n,handleExistingOrders:i,expirationInMinutes:a}),await o({main:e,side:r,entryPrice:n,handleExistingOrders:i,orders:s});const c=await e.getContractInfo(),d=function(e,r,t,n){const{filters:i,quantityPrecision:o}=t,a=i.find((e=>"LOT_SIZE"===e.filterType)),s=parseFloat(a.minQty),c=parseFloat(a.maxQty),d=parseFloat(a.stepSize),l=i.find((e=>"MIN_NOTIONAL"===e.filterType)),p=parseFloat(l.notional);let u=e*r/n;if(u=parseFloat(u.toFixed(o)),u<s)throw new Error(`Quantity ${u} is below the minimum allowed: ${s}`);if(u>c)throw new Error(`Quantity ${u} exceeds the maximum allowed: ${c}`);u=Math.floor(u/d)*d;const y=u*n;if(y<p)throw new Error(`Notional value ${y} is below the minimum allowed: ${p}`);return u}(t,e.leverage,c,n),l={side:r,type:"LIMIT",quantity:d,price:n,timeInForce:"GTC"};if("number"==typeof a){a<=10&&(a=10.1);const r=60*a*1e3;let t=Date.now();e.useServerTime&&(t=await e.getServerTime()),l.goodTillDate=t+r,l.timeInForce="GTD"}return await e.fetch("order","POST",l)})({main:this,side:e,amountInUSD:r,entryPrice:t,handleExistingOrders:n,expirationInMinutes:i,orders:a})}async createTakeProfitOrder({triggerPrice:r,handleExistingOrders:t,positions:n,orders:i}){return await(async({main:r,triggerPrice:t,handleExistingOrders:n,positions:i,orders:o})=>{if(e(t,n),"KEEP"===n)return!1;const a="TAKE_PROFIT_MARKET";i||(i=await r.getPositions());const s=i.find((e=>e.symbol===r.contractName&&0!==parseFloat(e.positionAmt)));if(!s)throw new Error(`No open position found for ${r.contractName}`);await(async({main:e,handleExistingOrders:r,type:t,orders:n})=>{if("KEEP"===r)return!0;if("ERROR"===r)throw new Error('New "take profit" order not execute because of an existing "take profit" order.');n||(n=await e.getOrders());const i=n.find((e=>e.origType===t));if(i){const r=await e.cancelOrder(i);e.debug&&console.log("createTakeProfitOrder canceled order",r)}})({main:r,handleExistingOrders:n,type:a,orders:o});const{entryPrice:c,positionAmt:d}=s,l=parseFloat(d)>0?"BUY":"SELL",p=await r.getContractInfo(),{tickSize:u}=p.filters.find((e=>"PRICE_FILTER"===e.filterType)),y=parseFloat((Math.round(t/u)*u).toFixed(p.pricePrecision));if("SELL"===l&&y>=parseFloat(c)||"BUY"===l&&y<=parseFloat(c))throw new Error(`Invalid take-profit price for ${l} position.`);const h={symbol:r.contractName,side:"BUY"===l?"SELL":"BUY",positionSide:"BOTH",type:a,timeInForce:"GTE_GTC",quantity:0,stopPrice:y,workingType:"MARK_PRICE",closePosition:!0,placeType:"position",priceProtect:!0};return r.debug&&console.log("payload createTakeProfitOrder",h),await r.fetch("order","POST",h)})({main:this,triggerPrice:r,handleExistingOrders:t,positions:n,orders:i})}async createStopLossOrder({triggerPrice:r,handleExistingOrders:t,positions:n,orders:i}){return await(async({main:r,triggerPrice:t,handleExistingOrders:n="REPLACE",positions:i,orders:o})=>{if(e(t,n),"KEEP"===n)return!1;const a="STOP_MARKET";i||(i=await r.getPositions());const s=i.find((e=>e.symbol===r.contractName&&0!==parseFloat(e.positionAmt)));if(!s)throw new Error(`No open position found for ${r.contractName}`);await(async({main:e,handleExistingOrders:r,type:t,orders:n})=>{if("KEEP"===r)return!0;if("ERROR"===r)throw new Error('New "take profit" order not execute because of an existing "take profit" order.');n||(n=await e.getOrders());const i=n.find((e=>e.origType===t));if(i){const r=await e.cancelOrder(i);e.debug&&console.log("createStopLossOrder canceled order",r)}})({main:r,handleExistingOrders:n,type:a,orders:o});const{entryPrice:c,positionAmt:d}=s,l=parseFloat(d)>0?"BUY":"SELL",p=await r.getContractInfo(),{tickSize:u}=p.filters.find((e=>"PRICE_FILTER"===e.filterType)),y=parseFloat((Math.round(t/u)*u).toFixed(p.pricePrecision));if("SELL"===l&&y<=parseFloat(c)||"BUY"===l&&y>=parseFloat(c))throw new Error(`Invalid stop-loss price for ${l} position.`);const h={symbol:r.contractName,side:"BUY"===l?"SELL":"BUY",positionSide:"BOTH",type:a,timeInForce:"GTE_GTC",quantity:0,stopPrice:y,workingType:"MARK_PRICE",closePosition:!0,placeType:"position",priceProtect:!0};return r.debug&&console.log("payload createStopLossOrder",h),await r.fetch("order","POST",h)})({main:this,triggerPrice:r,handleExistingOrders:t,positions:n,orders:i})}async changeMarginType(){return await this.fetch("marginType","POST",{marginType:this.marginType})}async ohlcv({interval:e,startTime:r,endTime:t,limit:n}){(({interval:e,limit:r=500,startTime:t,endTime:n})=>{const i=["1m","3m","5m","15m","30m","1h","2h","4h","6h","8h","12h","1d","3d","1w","1M"];if(!e)throw new Error('"interval" is required.');if(!i.includes(e))throw new Error(`Invalid "interval". Accepted values are: ${i.join(", ")}.`);if("number"!=typeof r||r<1||r>1500)throw new Error('"limit" must be a number between 1 and 1500 (inclusive).');if(r&&(t||n))throw new Error('"ohlcv" does not accept "limit" together with "startTime" or "endTime".');if(!(r||t&&n))throw new Error('"ohlcv" requires either "limit" or both "startTime" and "endTime".');if(t&&n&&new Date(t)>=new Date(n))throw new Error('"startTime" must be earlier than "endTime".')})({interval:e,startTime:r,endTime:t,limit:n});const i={interval:e,...n?{limit:n}:{startTime:r,endTime:t}},o=await this.fetch("klines","GET",i);if(!Array.isArray(o))throw new Error('Invalid response in "ohlcv".');if(!Array.isArray(o[0]))throw new Error('Invalid response in "ohlcv".');return o.map((([e,r,t,n,i,o])=>({open:parseFloat(r),high:parseFloat(t),low:parseFloat(n),close:parseFloat(i),volume:parseFloat(o),date:a(e)})))}}})(),BinanceFutures=n})();